{
  "ver": "1.0.15",
  "uuid": "b741bdf1-9130-4324-9756-d9756583c394",
  "compiledShaders": [
    {
      "vert": "\n#define _IS_VERT_SHADER 1\n\n  precision highp float;\r  \r  uniform mat4 cc_matViewProj;\r  uniform vec2 texSize;\r  attribute vec3 a_position;\r  attribute vec2 a_uv0;\r  varying vec2 uv0;\r  varying vec2 v_texCoord;\r  void main() {\r    vec4 pos = cc_matViewProj * vec4(a_position, 1);\r    gl_Position = pos;\r    uv0 = a_uv0;\r    v_texCoord = a_uv0.xy * texSize;\r  }\n\n\n",
      "frag": "\n#define _IS_FRAG_SHADER 1\n\n  \r  \r  #if COCOS_SHADER\r  precision highp float;\r  \r  \r  \r  #define iChannel0 texture\r  #define iTime u_time\r  #define iMouse u_mouse\r  #define iResolution u_resolution\r  \r  uniform vec2 u_mouse;\r  uniform vec2 u_resolution;\r  uniform float u_time;\r  \r  uniform sampler2D texture;\r  uniform vec2 texSize;\r  varying vec2 uv0;\r  varying vec2 v_texCoord;\r  #endif\r  \r  float sfract(float n)\r  {\r      return smoothstep(0.0,1.0,fract(n));\r  }\r  float rand(vec2 n)\r  {\r   \treturn fract(abs(sin(dot(n,vec2(5.3357,-5.8464))))*256.75+0.325);   \r  }\r  \r  float noise(vec2 n)\r  {\r      float h1 = mix(rand(vec2(floor(n.x),floor(n.y))),rand(vec2(ceil(n.x),floor(n.y))),sfract(n.x));\r      float h2 = mix(rand(vec2(floor(n.x),ceil(n.y))),rand(vec2(ceil(n.x),ceil(n.y))),sfract(n.x));\r      float s1 = mix(h1,h2,sfract(n.y));\r      return s1;\r  }\r  void doCamera( out vec3 camPos, out vec3 camTar, in float time, in float mouseX )\r  {\r      vec2 dir = ((iMouse.xy/iResolution.xy)*vec2(1.0,-0.5)+vec2(0.0,0.75))*6.28;\r      vec3 pos = vec3(0.0,0.5,0.0);\r  \tcamPos =  pos;\r      camTar = pos+vec3(cos(dir.x)*cos(dir.y),sin(dir.y),sin(dir.x)*cos(dir.y));\r  }\r  vec3 doBackground( in vec3 dir)\r  {\r      float sky = dot(dir,vec3(0.0,-1.0,0.0))*0.5+0.5;\r      float sun = pow(dot(dir,normalize(vec3(1.0,0.7,0.9)))*0.5+0.5,32.0);\r      vec2 p = vec2(dir.x+dir.z,dir.y-dir.z);\r      float clouds = noise(p*8.0)*noise(p*9.0)*noise(p*10.0)*noise(p*11.0)*sky;\r      vec3 total = vec3(sky*0.6+0.05+sun+clouds,sky*0.8+0.075+pow(sun,1.5)+clouds,sky+0.2+pow(sun,4.0)+clouds);\r      vec3 ground = texture2D(iChannel0,(dir.zx-vec2(.4,.4))/dir.y/0.85).rgb*vec3(1.1,1.0,0.9);\r      return mix(total,ground,clamp((sky-0.6)*64.0,0.0,1.0));\r  }\r      \r  float doModel( vec3 pos )\r  {\r      vec3 p = pos+vec3(iTime*0.2,0.0,0.0)+vec3(noise(pos.xz),0.0,noise(pos.xz+8.0))*0.2;\r      float height = 0.1*pow(noise(p.xz+vec2(iTime*0.7,iTime*0.6))*0.5+noise(p.xz*8.0+vec2(iTime))*0.35+noise(p.xz*16.0+vec2(0.0,iTime*0.5))*0.1+noise(p.xz*24.0)*0.05,0.25);\r      float model = p.y-height;\r      return model;\r  }\r  vec3 doMaterial(in vec3 rd, in vec3 nor )\r  {\r      vec3 ref = doBackground(reflect(rd,nor));\r      return mix(doBackground(refract(rd,nor,0.8)),ref,clamp(dot(ref,vec3(1.0/3.0))*1.5,0.0,1.0));\r  }\r  float calcSoftshadow( in vec3 ro, in vec3 rd );\r  \r  vec3 doFog( in vec3 rd, in float dis, in vec3 mal )\r  {\r      vec3 col = mal;\r  \tcol = mix(doBackground(rd),col,1.0-clamp(dis*dis/90.0,0.0,1.0));\r  \r      return col;\r  }\r  \r  float calcIntersection( in vec3 ro, in vec3 rd )\r  {\r  \tconst float maxd = 10.0;           \r  \tconst float precis = 0.001;        \r      float h = precis*2.0;\r      float t = 0.0;\r  \tfloat res = -1.0;\r      for( int i=0; i<90; i++ )          \r      {\r          if( h<precis||t>maxd ) break;\r  \t    h = doModel( ro+rd*t );\r          t += h*.8;\r      }\r  \r      if( t<maxd ) res = t;\r      return res;\r  }\r  \r  vec3 calcNormal( in vec3 pos )\r  {\r      const float eps = 0.002;             \r  \r      const vec3 v1 = vec3( 1.0,-1.0,-1.0);\r      const vec3 v2 = vec3(-1.0,-1.0, 1.0);\r      const vec3 v3 = vec3(-1.0, 1.0,-1.0);\r      const vec3 v4 = vec3( 1.0, 1.0, 1.0);\r  \r  \treturn normalize( v1*doModel( pos + v1*eps ) + \r  \t\t\t\t\t  v2*doModel( pos + v2*eps ) + \r  \t\t\t\t\t  v3*doModel( pos + v3*eps ) + \r  \t\t\t\t\t  v4*doModel( pos + v4*eps ) );\r  }\r  \r  float calcSoftshadow( in vec3 ro, in vec3 rd )\r  {\r      float res = 1.0;\r      float t = 0.5;                 \r  \tfloat h = 1.0;\r      for( int i=0; i<40; i++ )         \r      {\r          h = doModel(ro + rd*t);\r          res = min( res, 64.0*h/t );   \r  \t\tt += clamp( h, 0.02, 2.0 );   \r      }\r      return clamp(res,0.0,1.0);\r  }\r  \r  mat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\r  {\r      vec3 ww = normalize( ta - ro );\r      vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\r      vec3 vv = normalize( cross(uu,ww));\r      return mat3( uu, vv, ww );\r  }\r  \r  void mainImage( out vec4 fragColor, in vec2 fragCoord )\r  {\r      vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\r      vec2 m = iMouse.xy/iResolution.xy;\r      \r      \r      vec3 ro, ta;\r      doCamera( ro, ta, iTime, m.x );\r  \r      \r      mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 );  \r      \r  \t\r  \tvec3 rd = normalize( camMat * vec3(p.xy,2.0) ); \r  \r  \tvec3 col = doBackground(rd);\r  \r  \t\r      float t = calcIntersection( ro, rd );\r      if( t>-0.5 )\r      {\r          \r          vec3 pos = ro + t*rd;\r          vec3 nor = calcNormal(pos);\r  \r          \r          vec3 mal = doMaterial(rd, nor );\r  \r          col = doFog( rd, t, mal );\r  \t}\r      \r  \tcol = pow( clamp(col,0.0,1.0), vec3(0.4545) );\r  \t   \r      fragColor = vec4( col, 1.0 );\r  }\r  \r  \r  #if COCOS_SHADER\r  void main(){\r      mainImage(gl_FragColor, v_texCoord);\r  }\r  #endif\r  \r\n\n\n"
    }
  ],
  "subMetas": {}
}