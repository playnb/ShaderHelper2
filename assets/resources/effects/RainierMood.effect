%{
    "techniques": [
        {
            "passes": [
                {
                    "vert": "vs",
                    "frag": "fs",
                    "cullMode": "none",
                    "blend": true
                }
            ],
            "layer": 0
        }
    ],
    "properties": {
        "texture": {
            "type": "sampler2D",
            "value": null
        },
        "texSize": {
            "type": "vec2",
            "displayName": "纹理分辨率",
            "value": [
                512,
                512
            ]
        },
        "u_mouse": {
            "type": "vec2",
            "displayName": "鼠标位置",
            "value": [
                0.5,
                0.5
            ]
        },
        "u_resolution": {
            "type": "vec2",
            "displayName": "分辨率",
            "value": [
                512,
                512
            ]
        },
        "u_time": {
            "type": "float",
            "displayName": "时间",
            "value": 1.0
        },
        "resolution": {
            "type": "float",
            "displayName": "波纹密度",
            "value": 8.0
        }
    }
%}


%% fs {
  /*
  Copy from https://www.shadertoy.com/view/ldfyzl
  */
  
  /////////////////////////////////////////////////////////
  #if COCOS_SHADER
  precision highp float;
  
  //#define fragColor gl_FragColor
  //#define fragCoord v_texCoord
  #define iChannel0 texture
  #define iTime u_time
  #define iMouse u_mouse
  #define iResolution u_resolution
  
  uniform vec2 u_mouse;
  uniform vec2 u_resolution;
  uniform float u_time;
  
  uniform float resolution;
  
  uniform sampler2D texture;
  uniform vec2 texSize;
  varying vec2 uv0;
  varying vec2 v_texCoord;
  #endif
  #if USE_TEXTURE
  #endif
  /////////////////////////////////////////////////////////
  
  /*
  
  A quick experiment with rain drop ripples.
  
  This effect was written for and used in the launch scene of the
  64kB intro "H - Immersion", by Ctrl-Alt-Test.
  
   > http://www.ctrl-alt-test.fr/productions/h-immersion/
   > https://www.youtube.com/watch?v=27PN1SsXbjM
  
  --
  Zavie / Ctrl-Alt-Test
  
  */
  
  // Maximum number of cells a ripple can cross.
  #define MAX_RADIUS 2
  
  // Set to 1 to hash twice. Slower, but less patterns.
  #define DOUBLE_HASH 0
  
  // Hash functions shamefully stolen from:
  // https://www.shadertoy.com/view/4djSRW
  #define HASHSCALE1 .1031
  #define HASHSCALE3 vec3(.1031, .1030, .0973)
  
  float hash12(vec2 p) {
    vec3 p3 = fract(vec3(p.xyx) * HASHSCALE1);
    p3 += dot(p3, p3.yzx + 19.19);
    return fract((p3.x + p3.y) * p3.z);
  }
  
  vec2 hash22(vec2 p) {
    vec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);
    p3 += dot(p3, p3.yzx + 19.19);
    return fract((p3.xx + p3.yz) * p3.zy);
  }
  
  void mainImage(out vec4 fragColor, in vec2 fragCoord) {
    vec2 uv = fragCoord.xy / texSize.xy * resolution;
    vec2 p0 = floor(uv);
  
    vec2 circles = vec2(0.);
    for (int j = -MAX_RADIUS; j <= MAX_RADIUS; ++j) {
      for (int i = -MAX_RADIUS; i <= MAX_RADIUS; ++i) {
        vec2 pi = p0 + vec2(i, j);
  #if DOUBLE_HASH
        vec2 hsh = hash22(pi);
  #else
        vec2 hsh = pi;
  #endif
        vec2 p = pi + hash22(hsh);
  
        float t = fract(0.3 * iTime + hash12(hsh));
        vec2 v = p - uv;
        float d = length(v) - (float(MAX_RADIUS) + 1.) * t;
  
        float h = 1e-3;
        float d1 = d - h;
        float d2 = d + h;
        float p1 =
            sin(31. * d1) * smoothstep(-0.6, -0.3, d1) * smoothstep(0., -0.3, d1);
        float p2 =
            sin(31. * d2) * smoothstep(-0.6, -0.3, d2) * smoothstep(0., -0.3, d2);
        circles +=
            0.5 * normalize(v) * ((p2 - p1) / (2. * h) * (1. - t) * (1. - t));
      }
    }
    circles /= float((MAX_RADIUS * 2 + 1) * (MAX_RADIUS * 2 + 1));
  
    float intensity =
        mix(0.01, 0.15,
            smoothstep(0.1, 0.6, abs(fract(0.05 * iTime + 0.5) * 2. - 1.)));
    vec3 n = vec3(circles, sqrt(1. - dot(circles, circles)));
    vec3 color = texture2D(iChannel0, uv / resolution - intensity * n.xy).rgb;
    color += 5. * pow(clamp(dot(n, normalize(vec3(1., 0.7, 0.5))), 0., 1.), 6.);
    fragColor = vec4(color, 1.0);
  }
  
  /////////////////////////////////////////////////////////
  #if COCOS_SHADER
  void main() { mainImage(gl_FragColor, v_texCoord); }
  #endif
  /////////////////////////////////////////////////////////
}


%% vs {
  precision highp float;
  
  uniform mat4 cc_matViewProj;
  uniform vec2 texSize;
  attribute vec3 a_position;
  attribute vec2 a_uv0;
  varying vec2 uv0;
  varying vec2 v_texCoord;
  void main() {
    vec4 pos = cc_matViewProj * vec4(a_position, 1);
    gl_Position = pos;
    uv0 = a_uv0;
    v_texCoord = a_uv0.xy * texSize;
  }
}

