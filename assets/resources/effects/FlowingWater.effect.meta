{
  "ver": "1.0.15",
  "uuid": "8eb54456-d72f-4964-a21a-674772fd83ef",
  "compiledShaders": [
    {
      "vert": "\n#define _IS_VERT_SHADER 1\n\n  precision highp float;\r  \r  uniform mat4 cc_matViewProj;\r  uniform vec2 texSize;\r  attribute vec3 a_position;\r  attribute vec2 a_uv0;\r  varying vec2 uv0;\r  varying vec2 v_texCoord;\r  void main() {\r    vec4 pos = cc_matViewProj * vec4(a_position, 1);\r    gl_Position = pos;\r    uv0 = a_uv0;\r    v_texCoord = a_uv0.xy * texSize;\r  }\n\n\n",
      "frag": "\n#define _IS_FRAG_SHADER 1\n\n  \r  \r  \r  precision highp float;\r  \r  #define iChannel0 texture\r  #define iTime u_time\r  #define iMouse u_mouse\r  #define iResolution u_resolution\r  \r  uniform vec2 u_mouse;\r  uniform vec2 u_resolution;\r  uniform float u_time;\r  \r  uniform sampler2D texture;\r  uniform vec2 texSize;\r  varying vec2 uv0;\r  varying vec2 v_texCoord;\r  \r  \r  \r  \r  \r  float hash(in vec2 p) {\r    return fract(sin(p.x * 15.32 + p.y * 35.78) * 43758.23);\r  }\r  \r  vec2 hash2(vec2 p) {\r    return vec2(hash(p * .754), hash(1.5743 * p.yx + 4.5891)) - .5;\r  }\r  \r  vec2 add = vec2(1.0, 0.0);\r  \r  vec2 noise2(vec2 x) {\r    vec2 p = floor(x);\r    vec2 f = fract(x);\r    f = f * f * (3.0 - 2.0 * f);\r  \r    vec2 res = mix(mix(hash2(p), hash2(p + add.xy), f.x),\r                   mix(hash2(p + add.yx), hash2(p + add.xx), f.x), f.y);\r    return res;\r  }\r  \r  vec2 noise2b(in vec2 p) \r  {\r    const float K1 = 0.366025404; \r    const float K2 = 0.211324865; \r    p /= 2.;\r    vec2 i = floor(p + (p.x + p.y) * K1);\r  \r    vec2 a = p - i + (i.x + i.y) * K2;\r    vec2 o =\r        (a.x > a.y)\r            ? vec2(1.0, 0.0)\r            : vec2(\r                  0.0,\r                  1.0); \r    vec2 b = a - o + K2;\r    vec2 c = a - 1.0 + 2.0 * K2;\r  \r    vec3 h = max(0.5 - vec3(dot(a, a), dot(b, b), dot(c, c)), 0.0);\r  \r    vec3 nx = h * h * h * h *\r              vec3(dot(a, hash2(i + 0.0)), dot(b, hash2(i + o)),\r                   dot(c, hash2(i + 1.0)));\r    vec3 ny = h * h * h * h *\r              vec3(dot(a, hash2(i + 4.5)), dot(b, hash2(i + o + 4.5)),\r                   dot(c, hash2(i + 1.0 + 4.5)));\r  \r    return vec2(dot(nx, vec3(70.0)), dot(ny, vec3(70.0)));\r  }\r  \r  mat2 m2;\r  \r  vec2 fbm2(vec2 x) {\r    vec2 r = vec2(0.0);\r    float a = 1.;\r  \r    for (int i = 0; i < 6; i++) {\r      r += m2 * noise2b(x + r) * a;\r      x += .3 * r + .4;\r    }\r    return r;\r  }\r  \r  vec2 water(vec2 x) {\r    x = fbm2(x);\r    x = abs(x) / dot(x, x) - 1.;\r    return abs(x) / dot(x, x) - 1.;\r  }\r  \r  void mainImage(out vec4 fragColor, in vec2 fragCoord) {\r    vec2 uv = 2. * fragCoord.xy / iResolution.yy;\r    uv *= 10.;\r    float t = 1.5 * iTime;\r    float st = sin(t), ct = cos(t);\r    m2 = mat2(ct, st, -st, ct);\r    vec2 p = water(uv + 2. * iTime) + 2.;\r    float c = length(p) / 7.;\r    c = clamp(pow(c, 3.), 0., 1.);\r    vec3 col = texture2D(iChannel0, fract(uv / 20. + p / 45.)).rgb;\r    col = mix(col, vec3(.7, .7, .9), c);\r    fragColor = vec4(col, 1.0);\r  }\r  \r  \r  void main() { mainImage(gl_FragColor, v_texCoord); }\r  \r\n\n\n"
    }
  ],
  "subMetas": {}
}