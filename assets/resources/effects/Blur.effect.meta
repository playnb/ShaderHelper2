{
  "ver": "1.0.15",
  "uuid": "38f8b160-9717-4787-ab7f-8c03b0ba4987",
  "compiledShaders": [
    {
      "vert": "\n#define _IS_VERT_SHADER 1\n\n  precision highp float;\r  \r  uniform mat4 cc_matViewProj;\r  attribute vec3 a_position;\r  attribute vec2 a_uv0;\r  varying vec2 uv0;\r  void main() {\r    vec4 pos = cc_matViewProj * vec4(a_position, 1);\r    gl_Position = pos;\r    uv0 = a_uv0;\r  }\n\n\n",
      "frag": "\n#define _IS_FRAG_SHADER 1\n\n  precision highp float;\r  \r  #define repeats 5.\r  \r  uniform sampler2D texture;\r  \r  uniform float strong;\r  \r  uniform float light;\r  \r  varying vec2 uv0;\r  \r  \r  vec4 draw(vec2 uv) { return texture2D(texture, uv).rgba; }\r  \r  float grid(float var, float size) { return floor(var * size) / size; }\r  \r  vec4 dim(vec4 col, float factor) {\r    return vec4(col.r * factor, col.g * factor, col.b * factor, col.a);\r  }\r  \r  \r  float rand(vec2 co) {\r    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\r  }\r  void main() {\r    \r    vec4 blurred_image = vec4(0.);\r    \r    for (float i = 0.; i < repeats; i++) {\r      \r      vec2 q = vec2(cos(degrees((i / repeats) * 360.)),\r                    sin(degrees((i / repeats) * 360.))) *\r               (rand(vec2(i, uv0.x + uv0.y)) + strong);\r      vec2 uv2 = uv0 + (q * strong);\r      blurred_image += draw(uv2) / 2.;\r  \r      \r      q = vec2(cos(degrees((i / repeats) * 360.)),\r               sin(degrees((i / repeats) * 360.))) *\r          (rand(vec2(i + 2., uv0.x + uv0.y + 24.)) + strong);\r      uv2 = uv0 + (q * strong);\r      blurred_image += draw(uv2) / 2.;\r    }\r    \r    blurred_image /= repeats;\r    \r    blurred_image = dim(blurred_image, light);\r    \r    gl_FragColor = vec4(blurred_image);\r  }\n\n\n"
    }
  ],
  "subMetas": {}
}