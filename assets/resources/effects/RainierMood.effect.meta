{
  "ver": "1.0.15",
  "uuid": "b9e5cf19-920d-46d2-be29-9e39a6292f80",
  "compiledShaders": [
    {
      "vert": "\n#define _IS_VERT_SHADER 1\n\n  precision highp float;\r  \r  uniform mat4 cc_matViewProj;\r  uniform vec2 texSize;\r  attribute vec3 a_position;\r  attribute vec2 a_uv0;\r  varying vec2 uv0;\r  varying vec2 v_texCoord;\r  void main() {\r    vec4 pos = cc_matViewProj * vec4(a_position, 1);\r    gl_Position = pos;\r    uv0 = a_uv0;\r    v_texCoord = a_uv0.xy * texSize;\r  }\n\n\n",
      "frag": "\n#define _IS_FRAG_SHADER 1\n\n  \r  \r  \r  #if COCOS_SHADER\r  precision highp float;\r  \r  \r  \r  #define iChannel0 texture\r  #define iTime u_time\r  #define iMouse u_mouse\r  #define iResolution u_resolution\r  \r  uniform vec2 u_mouse;\r  uniform vec2 u_resolution;\r  uniform float u_time;\r  \r  uniform float resolution;\r  \r  uniform sampler2D texture;\r  uniform vec2 texSize;\r  varying vec2 uv0;\r  varying vec2 v_texCoord;\r  #endif\r  #if USE_TEXTURE\r  #endif\r  \r  \r  \r  \r  \r  #define MAX_RADIUS 2\r  \r  \r  #define DOUBLE_HASH 0\r  \r  \r  \r  #define HASHSCALE1 .1031\r  #define HASHSCALE3 vec3(.1031, .1030, .0973)\r  \r  float hash12(vec2 p) {\r    vec3 p3 = fract(vec3(p.xyx) * HASHSCALE1);\r    p3 += dot(p3, p3.yzx + 19.19);\r    return fract((p3.x + p3.y) * p3.z);\r  }\r  \r  vec2 hash22(vec2 p) {\r    vec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\r    p3 += dot(p3, p3.yzx + 19.19);\r    return fract((p3.xx + p3.yz) * p3.zy);\r  }\r  \r  void mainImage(out vec4 fragColor, in vec2 fragCoord) {\r    vec2 uv = fragCoord.xy / texSize.xy * resolution;\r    vec2 p0 = floor(uv);\r  \r    vec2 circles = vec2(0.);\r    for (int j = -MAX_RADIUS; j <= MAX_RADIUS; ++j) {\r      for (int i = -MAX_RADIUS; i <= MAX_RADIUS; ++i) {\r        vec2 pi = p0 + vec2(i, j);\r  #if DOUBLE_HASH\r        vec2 hsh = hash22(pi);\r  #else\r        vec2 hsh = pi;\r  #endif\r        vec2 p = pi + hash22(hsh);\r  \r        float t = fract(0.3 * iTime + hash12(hsh));\r        vec2 v = p - uv;\r        float d = length(v) - (float(MAX_RADIUS) + 1.) * t;\r  \r        float h = 1e-3;\r        float d1 = d - h;\r        float d2 = d + h;\r        float p1 =\r            sin(31. * d1) * smoothstep(-0.6, -0.3, d1) * smoothstep(0., -0.3, d1);\r        float p2 =\r            sin(31. * d2) * smoothstep(-0.6, -0.3, d2) * smoothstep(0., -0.3, d2);\r        circles +=\r            0.5 * normalize(v) * ((p2 - p1) / (2. * h) * (1. - t) * (1. - t));\r      }\r    }\r    circles /= float((MAX_RADIUS * 2 + 1) * (MAX_RADIUS * 2 + 1));\r  \r    float intensity =\r        mix(0.01, 0.15,\r            smoothstep(0.1, 0.6, abs(fract(0.05 * iTime + 0.5) * 2. - 1.)));\r    vec3 n = vec3(circles, sqrt(1. - dot(circles, circles)));\r    vec3 color = texture2D(iChannel0, uv / resolution - intensity * n.xy).rgb;\r    color += 5. * pow(clamp(dot(n, normalize(vec3(1., 0.7, 0.5))), 0., 1.), 6.);\r    fragColor = vec4(color, 1.0);\r  }\r  \r  \r  #if COCOS_SHADER\r  void main() { mainImage(gl_FragColor, v_texCoord); }\r  #endif\r  \n\n\n"
    }
  ],
  "subMetas": {}
}